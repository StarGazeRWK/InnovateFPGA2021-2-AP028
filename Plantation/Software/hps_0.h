#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'sensor_adc_0', class 'altera_up_avalon_adc'
 * The macros are prefixed with 'SENSOR_ADC_0_'.
 * The prefix is the slave descriptor.
 */
#define SENSOR_ADC_0__COMPONENT_TYPE altera_up_avalon_adc
#define SENSOR_ADC_0__COMPONENT_NAME sensor_adc_0
#define SENSOR_ADC_0__BASE 0x0
#define SENSOR_ADC_0__SPAN 32
#define SENSOR_ADC_0__END 0x1f

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1648609350

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x3000
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x300f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 7
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 127

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'relay_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'RELAY_PIO_'.
 * The prefix is the slave descriptor.
 */
#define RELAY_PIO_COMPONENT_TYPE altera_avalon_pio
#define RELAY_PIO_COMPONENT_NAME relay_pio
#define RELAY_PIO_BASE 0x6000
#define RELAY_PIO_SPAN 16
#define RELAY_PIO_END 0x600f
#define RELAY_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define RELAY_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define RELAY_PIO_CAPTURE 0
#define RELAY_PIO_DATA_WIDTH 8
#define RELAY_PIO_DO_TEST_BENCH_WIRING 0
#define RELAY_PIO_DRIVEN_SIM_VALUE 0
#define RELAY_PIO_EDGE_TYPE NONE
#define RELAY_PIO_FREQ 50000000
#define RELAY_PIO_HAS_IN 0
#define RELAY_PIO_HAS_OUT 1
#define RELAY_PIO_HAS_TRI 0
#define RELAY_PIO_IRQ_TYPE NONE
#define RELAY_PIO_RESET_VALUE 0


/*
 * Macros for device 'DHT22_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DHT22_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DHT22_PIO__COMPONENT_TYPE altera_avalon_pio
#define DHT22_PIO__COMPONENT_NAME DHT22_pio
#define DHT22_PIO__BASE 0x0800
#define DHT22_PIO__SPAN 16
#define DHT22_PIO__END 0x080f
#define DHT22_PIO__IRQ 3
#define DHT22_PIO__BIT_CLEARING_EDGE_REGISTER 1
#define DHT22_PIO__BIT_MODIFYING_OUTPUT_REGISTER 0
#define DHT22_PIO__CAPTURE 1
#define DHT22_PIO__DATA_WIDTH 1
#define DHT22_PIO__DO_TEST_BENCH_WIRING 0
#define DHT22_PIO__DRIVEN_SIM_VALUE 0
#define DHT22_PIO__EDGE_TYPE ANY
#define DHT22_PIO__FREQ 50000000
#define DHT22_PIO__HAS_IN 1
#define DHT22_PIO__HAS_OUT 1
#define DHT22_PIO__HAS_TRI 0
#define DHT22_PIO__IRQ_TYPE LEVEL
#define DHT22_PIO__RESET_VALUE 0

/*
 * Macros for device 'rgb_led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'RGB_LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define RGB_LED_PIO__COMPONENT_TYPE altera_avalon_pio
#define RGB_LED_PIO__COMPONENT_NAME rgb_led_pio
#define RGB_LED_PIO__BASE 0x7000
#define RGB_LED_PIO__SPAN 16
#define RGB_LED_PIO__END 0x700f
#define RGB_LED_PIO__BIT_CLEARING_EDGE_REGISTER 0
#define RGB_LED_PIO__BIT_MODIFYING_OUTPUT_REGISTER 0
#define RGB_LED_PIO__CAPTURE 0
#define RGB_LED_PIO__DATA_WIDTH 8
#define RGB_LED_PIO__DO_TEST_BENCH_WIRING 0
#define RGB_LED_PIO_DRIVEN_SIM_VALUE 0
#define RGB_LED_PIO_EDGE_TYPE NONE
#define RGB_LED_PIO_FREQ 50000000
#define RGB_LED_PIO_HAS_IN 0
#define RGB_LED_PIO_HAS_OUT 1
#define RGB_LED_PIO_HAS_TRI 0
#define RGB_LED_PIO_IRQ_TYPE NONE
#define RGB_LED_PIO_RESET_VALUE 255

#endif /* _ALTERA_HPS_0_H_ */
