#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'gpio1_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO1_PIO_'.
 * The prefix is the slave descriptor.
 */
#define GPIO1_PIO_COMPONENT_TYPE altera_avalon_pio
#define GPIO1_PIO_COMPONENT_NAME gpio1_pio
#define GPIO1_PIO_BASE 0x0
#define GPIO1_PIO_SPAN 16
#define GPIO1_PIO_END 0xf
#define GPIO1_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define GPIO1_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GPIO1_PIO_CAPTURE 0
#define GPIO1_PIO_DATA_WIDTH 8
#define GPIO1_PIO_DO_TEST_BENCH_WIRING 0
#define GPIO1_PIO_DRIVEN_SIM_VALUE 0
#define GPIO1_PIO_EDGE_TYPE NONE
#define GPIO1_PIO_FREQ 50000000
#define GPIO1_PIO_HAS_IN 0
#define GPIO1_PIO_HAS_OUT 1
#define GPIO1_PIO_HAS_TRI 0
#define GPIO1_PIO_IRQ_TYPE NONE
#define GPIO1_PIO_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x1000
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x1007
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1570087099

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x2000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x2007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8

/*
 * Macros for device 'gipio0_output_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'GIPIO0_OUTPUT_PIO_'.
 * The prefix is the slave descriptor.
 */
#define GIPIO0_OUTPUT_PIO_COMPONENT_TYPE altera_avalon_pio
#define GIPIO0_OUTPUT_PIO_COMPONENT_NAME gipio0_output_pio
#define GIPIO0_OUTPUT_PIO_BASE 0x3000
#define GIPIO0_OUTPUT_PIO_SPAN 16
#define GIPIO0_OUTPUT_PIO_END 0x300f
#define GIPIO0_OUTPUT_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define GIPIO0_OUTPUT_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GIPIO0_OUTPUT_PIO_CAPTURE 0
#define GIPIO0_OUTPUT_PIO_DATA_WIDTH 8
#define GIPIO0_OUTPUT_PIO_DO_TEST_BENCH_WIRING 0
#define GIPIO0_OUTPUT_PIO_DRIVEN_SIM_VALUE 0
#define GIPIO0_OUTPUT_PIO_EDGE_TYPE NONE
#define GIPIO0_OUTPUT_PIO_FREQ 50000000
#define GIPIO0_OUTPUT_PIO_HAS_IN 0
#define GIPIO0_OUTPUT_PIO_HAS_OUT 1
#define GIPIO0_OUTPUT_PIO_HAS_TRI 0
#define GIPIO0_OUTPUT_PIO_IRQ_TYPE NONE
#define GIPIO0_OUTPUT_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x4000
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x400f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 4
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x5000
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x500f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 2
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'gpio1_input_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'GPIO1_INPUT_PIO_'.
 * The prefix is the slave descriptor.
 */
#define GPIO1_INPUT_PIO_COMPONENT_TYPE altera_avalon_pio
#define GPIO1_INPUT_PIO_COMPONENT_NAME gpio1_input_pio
#define GPIO1_INPUT_PIO_BASE 0x6000
#define GPIO1_INPUT_PIO_SPAN 16
#define GPIO1_INPUT_PIO_END 0x600f
#define GPIO1_INPUT_PIO_IRQ 3
#define GPIO1_INPUT_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define GPIO1_INPUT_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GPIO1_INPUT_PIO_CAPTURE 1
#define GPIO1_INPUT_PIO_DATA_WIDTH 8
#define GPIO1_INPUT_PIO_DO_TEST_BENCH_WIRING 0
#define GPIO1_INPUT_PIO_DRIVEN_SIM_VALUE 0
#define GPIO1_INPUT_PIO_EDGE_TYPE RISING
#define GPIO1_INPUT_PIO_FREQ 50000000
#define GPIO1_INPUT_PIO_HAS_IN 1
#define GPIO1_INPUT_PIO_HAS_OUT 0
#define GPIO1_INPUT_PIO_HAS_TRI 0
#define GPIO1_INPUT_PIO_IRQ_TYPE LEVEL
#define GPIO1_INPUT_PIO_RESET_VALUE 0

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x30000
#define ILC_SPAN 256
#define ILC_END 0x300ff

/*
 * Macros for device 'alt_vip_vfr_hdmi', class 'alt_vip_vfr'
 * The macros are prefixed with 'ALT_VIP_VFR_HDMI_'.
 * The prefix is the slave descriptor.
 */
#define ALT_VIP_VFR_HDMI_COMPONENT_TYPE alt_vip_vfr
#define ALT_VIP_VFR_HDMI_COMPONENT_NAME alt_vip_vfr_hdmi
#define ALT_VIP_VFR_HDMI_BASE 0x31000
#define ALT_VIP_VFR_HDMI_SPAN 128
#define ALT_VIP_VFR_HDMI_END 0x3107f

/*
 * Macros for device 'adc_ltc2308', class 'adc_ltc2308'
 * The macros are prefixed with 'ADC_LTC2308_'.
 * The prefix is the slave descriptor.
 */
#define ADC_LTC2308_COMPONENT_TYPE adc_ltc2308
#define ADC_LTC2308_COMPONENT_NAME adc_ltc2308
#define ADC_LTC2308_BASE 0x43020
#define ADC_LTC2308_SPAN 8
#define ADC_LTC2308_END 0x43027


#endif /* _ALTERA_HPS_0_H_ */
